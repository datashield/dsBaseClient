% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.cor.R
\name{ds.cor}
\alias{ds.cor}
\title{Calculates the correlation of R objects in the server-side}
\usage{
ds.cor(
  x = NULL,
  y = NULL,
  naAction = "pairwise.complete",
  type = "split",
  datasources = NULL
)
}
\arguments{
\item{x}{a character string providing the name of the input vector, data frame or matrix.}

\item{y}{a character string providing the name of the input vector, data frame or matrix.
Default NULL.}

\item{naAction}{a character string giving a method for computing correlations in the
presence of missing values. This must be set to  \code{'casewise.complete'} or
\code{'pairwise.complete'}. Default \code{'pairwise.complete'}. For more information see details.}

\item{type}{a character string that represents the type of analysis to carry out. 
This must be set to \code{'split'} or \code{'combine'}.  Default \code{'split'}. For more information see details.}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login. 
If the \code{datasources} argument is not specified
the default set of connections will be used: see \code{\link{datashield.connections_default}}.}
}
\value{
\code{ds.cor} returns a list containing the number of missing values in each variable,
the number of missing variables casewise or
pairwise depending on the argument \code{naAction}, the correlation matrix, the number of used complete cases
and an error message which indicates whether or not the input variables pass the disclosure control (i.e. none of them
is dichotomous with a level having fewer counts than the pre-specified threshold). If any of the input variables do not
pass the disclosure control then all the output values are replaced with NAs. If all the variables are valid and pass
the control, then the output matrices are returned and also an error message is returned but it is replaced by NA.
}
\description{
This function calculates the correlation of two variables or the correlation
matrix for the variables of an input data frame.
}
\details{
In addition to computing correlations; this function produces a table outlining the
number of complete cases and a table outlining the number of missing values to allow for the
user to decide the 'relevance' of the correlation based on the number of complete
cases included in the correlation calculations.

If the argument \code{y} is not NULL, the dimensions of the object have to be 
compatible with the argument \code{x}. 

If \code{naAction} is set to \code{'casewise.complete'}, then the function omits all the rows
in the whole data frame that include at least one cell with a missing value before the calculation of correlations.
If \code{naAction} is set to \code{'pairwise.complete'} (default),
 then the function divides the input data frame to 
subset data frames formed by each pair between two variables 
(all combinations are considered) and omits the rows
with missing values at each pair separately and then calculates the correlations of those pairs.

 If \code{type} is set to \code{'split'} (default), the correlation of two variables or the
 variance-correlation matrix of an input data frame and the number of 
 complete cases and missing values are returned for every single study. 
 If type is set to \code{'combine'}, the pooled correlation, the total number of complete cases 
 and the total number of missing values aggregated from all the involved studies, are returned.
 
 Server function called: \code{corDS}
}
\examples{
\dontrun{

## Version 6, for version 5 see the Wiki
  # Connecting to the Opal servers

  require('DSI')
  require('DSOpal')
  require('dsBaseClient')

  builder <- DSI::newDSLoginBuilder()
  builder$append(server = "study1", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM1", driver = "OpalDriver")
  builder$append(server = "study2", 
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM2", driver = "OpalDriver")
  builder$append(server = "study3",
                 url = "http://192.168.56.100:8080/", 
                 user = "administrator", password = "datashield_test&", 
                 table = "CNSIM.CNSIM3", driver = "OpalDriver")
  logindata <- builder$build()
  
  # Log onto the remote Opal training servers
  connections <- DSI::datashield.login(logins = logindata, assign = TRUE, symbol = "D") 
  
  # Calculate the correlation between two vectors
  ds.assign(newobj='labhdl', toAssign='D$LAB_HDL')
  ds.assign(newobj='labtsc', toAssign='D$LAB_TSC')
  ds.assign(newobj='gender', toAssign='D$GENDER')
  ds.cor(x = 'labhdl',
         y = 'labtsc',
         naAction = 'pairwise.complete',
         type = 'combine',
         datasources = connections)
  ds.cor(x = 'labhdl',
         y = 'gender',
         naAction = 'pairwise.complete',
         type = 'combine',
         datasources = connections[1]) #only the first Opal server is used ("study1")

  # clear the Datashield R sessions and logout
  datashield.logout(connections)

}
}
\author{
DataSHIELD Development Team
}
