% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.seq.R
\name{ds.seq}
\alias{ds.seq}
\title{ds.seq calling assign function seqDS}
\usage{
ds.seq(
  FROM.value.char = "1",
  BY.value.char = "1",
  TO.value.char = NULL,
  LENGTH.OUT.value.char = NULL,
  ALONG.WITH.name = NULL,
  newobj = "newObj",
  datasources = NULL
)
}
\arguments{
\item{FROM.value.char}{the starting value for the sequence expressed as an integer
or real number with a decimal point but 
in character form. e.g. FROM.value.char="1" will start at 1, FROM.value.char="-10.7"
will start at -10.7. Default = "1"}

\item{BY.value.char}{the value to increment each step in the sequence
expressed as an integer
or real number with a decimal point but 
in character form. e.g. if BY.value.char="2.93" the sequence will increment
by 2.93 at each step, if BY.value.char="-1" the sequence will decrement
by 1 at each step. Default = "+1"}

\item{TO.value.char}{the terminal value for the sequence expressed as an integer
or real number with a decimal point but 
in character form. e.g. if TO.value.char="17.33" the sequence will terminate
at the last value in the sequence that is <= 17.33. Default = "1"}

\item{LENGTH.OUT.value.char}{length of the sequence at which point
its extension should be stopped, expressed as an integer
or real number with a decimal point but 
in character form. e.g.  LENGTH.OUT.value.char="1000" will
generate a sequence of length 1000. If however, LENGTH.OUT.value.char
is not an integer any value larger than a given integer will result
in a sequence of length integer+1. e.g.  LENGTH.OUT.value.char="1000.0001" will
generate a sequence of length 1001. If 0.0>=LENGTH.OUT.value.char>(-1.0), the function
will run but will generate a sequence with no elements.
If LENGTH.OUT.value.char<=(-1.0) the function will terminate with an error.
Default = NULL.}

\item{ALONG.WITH.name}{For convenience, rather than specifying a value
for LENGTH.OUT it can often be better to specify a variable name as
the <ALONG.WITH.name> argument. e.g. ALONG.WITH.name = "vector.name".
This can be particularly useful in DataSHIELD
where the length of the sequence you need to generate in each data set
depends on the standard length of vectors in that data set and this will
in general vary.}

\item{newobj}{This a character string providing a name for the output
sequence vector which defaults to 'seq.newobj' if no name is specified.}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login. If the <datasources>
the default set of connections will be used: see \link{datashield.connections_default}.}
}
\value{
the object specified by the <newobj> argument (or default name newObj)
which is written to the serverside.
As well as writing the output object as <newobj>
on the serverside, two validity messages are returned
indicating whether <newobj> has been created in each data source and if so whether
it is in a valid form. If its form is not valid in at least one study - e.g. because
a disclosure trap was tripped and creation of the full output object was blocked -
{ds.seq()} also returns any studysideMessages that can explain the error in creating
the full output object. As well as appearing on the screen at run time,if you wish to
see the relevant studysideMessages at a later date you can use the {ds.message}
function. If you type ds.message("<newobj>") it will print out the relevant
studysideMessage from any datasource in which there was an error in creating <newobj>
and a studysideMessage was saved. If there was no error and <newobj> was created
without problems no studysideMessage will have been saved and ds.message("<newobj>")
will return the message: "ALL OK: there are no studysideMessage(s) on this datasource".
}
\description{
ds.seq calling assign function seqDS
}
\details{
Calls an assign function that uses the native R function seq() to create
any one of a flexible range of sequence vectors that can then be used to help
manage and analyse data. As it is an assign function the resultant vector is
written as a new object into all of the specified data source servers. Please
note that some combinations  of arguments are not allowed for the function {seq}
in native R and hence are also prohibited in {ds.seq}. To be specific,
FROM.value.char defines the start of the sequence and BY.value.char defines how
the sequence is incremented (or decremented) at each step. But where the
sequence stops can be defined in three different ways: TO.value.char indicates
the terminal value of the sequence e.g. ds.seq(FROM.value.char="3", BY.value.char="2",
TO.value.char="7") creates the sequence 3,5,7 on the serverside;
LENGTH.OUT.value.char indicates the length of the sequence
e.g. ds.seq(FROM.value.char="3", BY.value.char="2", LENGTH.OUT.value.char="7")
creates the sequence 3,5,7,9,11,13,15 on the serverside; ALONG.WITH.name
specifies the name of a variable (on the serverside) such that the sequence
in each study will be equal in length to that variable.
i.e. ds.seq(FROM.value.char="3", BY.value.char="2", ALONG.WITH.name="var.x")
will create a sequence such that if var.x is of length 100 in study 1 the
sequence written to study 1 will be 3,5,7,...,197,199,201 and if var.x is
of length 4 in study 2, the sequence written to study 2 will be 3,5,7,9.
BUT CRUCIALLY - only one of the three arguments TO.value.char,
LENGTH.OUT.value.char and ALONG.WITH.name can be non-null in any one call.
}
\author{
Paul Burton for DataSHIELD Development Team, 17/9/2019
}
