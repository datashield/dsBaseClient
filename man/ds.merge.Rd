% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.merge.R
\name{ds.merge}
\alias{ds.merge}
\title{ds.merge calling assign function mergeDS}
\usage{
ds.merge(
  x.name = NULL,
  y.name = NULL,
  by.x.names = NULL,
  by.y.names = NULL,
  all.x = FALSE,
  all.y = FALSE,
  sort = TRUE,
  suffixes = c(".x", ".y"),
  no.dups = TRUE,
  incomparables = NULL,
  newobj = NULL,
  datasources = NULL
)
}
\arguments{
\item{x.name, }{the name of the first data.frame to be merged specified in
inverted commas. For example: x.name='dfx.name'. Native R refers to
the first data.frame as x and the second as y.}

\item{y.name, }{the name of the second data.frame to be merged specified in
inverted commas. For example: y.name='dfy.name'. Native R refers to
the first data.frame as x and the second as y.}

\item{by.x.names}{the name of a single variable or a vector of names of multiple variables
containing the IDs or other data on which data.frame x is to be merged/linked
to data.frame y. Names must be specified in inverted commas.
For example: by.x.names='individual.ID' or
by.x.names=c('year.of.birth', 'month.of.birth', 'day.of.birth', 'surname')}

\item{by.y.names}{the name of a single variable or a vector of names of multiple variables
containing the IDs or other data on which data.frame y is to be merged/linked
to data.frame x. Names must be specified in inverted commas.
For example: by.y.names='individual.ID' or
by.y.names=c('year.of.birth', 'month.of.birth', 'day.of.birth', 'surname')}

\item{all.x}{logical, if TRUE, then extra rows will be added to the output,
one for each row in x that has no matching row in y. These rows will have NAs in those
columns that are usually filled with values from y. Default is FALSE, so that only
rows with data from both x and y are included in the output.}

\item{all.y}{logical, if TRUE, then extra rows will be added to the output,
one for each row in y that has no matching row in x. These rows will have NAs in those
columns that are usually filled with values from x. Default is FALSE, so that only
rows with data from both x and y are included in the output.}

\item{sort}{logical, if TRUE the merged result should be sorted on elements
in the by.x.names and by.y.names columns. Default = TRUE.}

\item{suffixes}{a character vector of length 2 specifying the suffixes to be used for
making unique common column names in the two input data.frames
when they both appear in the merged data.frame. This avoids ambiguity in the
source of columns that are not used for merging. Default is .x for vector names in
the first data.frame and .y for vector names in the second data.frame}

\item{no.dups}{logical, indicating that suffixes are appended in more cases to
rigorously avoid duplicated column names in the merged data.frame. Default TRUE
but was apparently implicitly FALSE before R version 3.5.0.}

\item{incomparables, }{values which cannot be matched. See 'match' in help
for Native R {merge} function. This is intended to be used for merging on
one column, so these are incomparable values of that column.}

\item{newobj}{the name of the merged data.frame. If this argument is set
to NULL, the name of the merged data.frame is defaulted to 'merge.newobj'
where x.name is the name of the first input data.frame
specified as the <x.name> argument and y.name
is the name of the second input data.frame specified as the <y.name> argument.}

\item{datasources}{a list of \code{\link{DSConnection-class}} objects obtained after login. If the <datasources>
the default set of connections will be used: see \link{datashield.connections_default}.}
}
\value{
the merged data.frame specified by the <newobj> argument (or by default 'x.name_y.name'
if the <newobj> argument is NULL) which is written to the serverside. In addition,
two validity messages are returned to the clientside
indicating whether <newobj> has been created in each data source and if so whether
it is in a valid form. If its form is not valid in at least one study there may
be a studysideMessage that can explain the error in creating
the full output object. As well as appearing on the screen at run time,if you wish to
see the relevant studysideMessages at a later date you can use the {ds.message}
function. If you type ds.message(<newobj>) it will print out the relevant
studysideMessage from any datasource in which there was an error in creating <newobj>
and a studysideMessage was saved. If there was no error and <newobj> was created
without problems no studysideMessage will have been saved and ds.message(<newobj>)
will return the message: "ALL OK: there are no studysideMessage(s) on this datasource".
}
\description{
merges (links) two data.frames together based on common
values in defined vectors in each data.frame
}
\details{
For further information see details of the native R function {merge}.
In choosing which variables to use to merge/link the data.frames the native
R function {merge} is very flexible. For example, you can choose to merge
using all vectors that appear in both data.frames. However, for ds.merge
in DataSHIELD it is required that all the vectors which dictate the merging
are explicitly identified for both data.frames using the <by.x.names> and
<by.y.names> arguments
}
\author{
Amadou Gaye, Paul Burton, for DataSHIELD Development Team
}
